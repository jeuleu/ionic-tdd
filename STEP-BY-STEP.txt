STEP BY STEP
============
00- Préparation (avant le début)

01.1- Device Android chargé, branché, OK

Super important :)
- faire un premier run pour accélerer le lancement

ionic run android



01.2- Copie du dossier TMP\02 Modèle dans PrezTechnique (3 min)
- renommer le dossier en Dev

Ecran JL :
Ouvrir Brackets :
C:\Users\m312742\PrezTechnique\ionic-tdd
    -> STEP-BY-STEP.txt

Ecrans spécateurs :
Ouvrir 3 commandes ConEmu
C:\Users\m312742\PrezTechnique\Dev

Ouvrir Brackets : ouvrir un dossier :  
C:\Users\m312742\PrezTechnique\Dev

Ouvrir la présentation dans Chrome
    file:///C:/Users/m312742/PrezTechnique/ionic-tdd/index.html#/

01.4- Premier build

Onglet 1 :
ionic serve

Onglet 2 :
ionic build android

==============================





 

});

-- Compléter en définissant le service mocké

    CameraSrvMock = {
        getPicture: function(){
                // mock promise
                var deferred = $q.defer();
                
                switch (deferredOut) {
                case DEFERRED_KO:
                    deferred.reject('KO IMAGE KO');
                    break;
                case DEFERRED_OK:
                    deferred.resolve('Image OK');
                    break;
                default:
                    deferred.reject('????????');
                    break;
                }
                return deferred.promise;
            }            
        };
    }));  





- tester ce service mocké


    it('should return Image OK in case of success', function() {
        deferredOut = DEFERRED_OK;
        controller("CameraController as CamCtrl", {
                $scope: scope,
                CameraSrv: CameraSrvMock
            });
            scope.CamCtrl.takePicture();
            scope.$digest();
            expect(scope.CamCtrl.imageURI).toBe('Image OK')
    });



>> ERROR : expected undefined to be 'Image OK'

>> Il faut inclure le service  dans le controller CameraSrv




    var injectParams = ["CameraSrv"];
    
    
    
puis :



    function CameraCtrl(CameraSrv) {
    
    
    
et après :



        vm.takePicture = function() {
            return vm.imageURI = 'ABC';
        }



>> ERROR : Expected 'ABC' to be 'Image OK'

- et enfin, le vrai code :

        vm.takePicture = function() {

           var options = { 
                quality : 75, 
                allowEdit : true,
                targetWidth: 300,
                targetHeight: 300,
                saveToPhotoAlbum: false
            };

            CameraSrv.getPicture(options).then(function(resultImg) {
              console.log(resultImg);
              vm.imageURI = resultImg;
            }, function(err) {
              vm.imageURI = err;
            });

        }

>> ERROR : unknown provider








08- mettre à jour l'application : index.html

constater qu'il y a des erreurs 
>> ERROR : Error: [$injector:nomod] Module 'Selfie.Camera.module' is not available!


    
- rajouter des paramètres et adapter :
- $scope -> CameraSrv
- ajouter les options
- vm.imageURI = imageURI;

           var options = { 
                quality : 75, 
                allowEdit : true,
                targetWidth: 300,
                targetHeight: 300,
                saveToPhotoAlbum: false
            };

            CameraSrv.getPicture(options).then(function(imageURI) {
              console.log(imageURI);
              vm.imageURI = imageURI;
            }, function(err) {
              console.log(err);
            });

>> ERROR :   Error: [$injector:unpr] Unknown provider: CameraSrvProvider <- CameraSrv <- CameraController  


07- créer le service camera.service.js

(function() {
    'use strict';

    angular.module('Selfie.Camera.module').
        factory('CameraSrv', Camera);
    
//    var injectParams = ["$q"];
    
    /** Functions code */    
//    Camera.$inject = injectParams;
    
    function Camera ($q) {
        return {
            getPicture: function(options) {
              var q = $q.defer();

              try {
                  navigator.camera.getPicture(function(result) {
                    // Do any magic you need
                    q.resolve(result);
                  }, function(err) {
                    q.reject(err);
                  }, options);
              }
              catch(err) {
                  q.reject("img/ionic.png");
              }

              return q.promise;
            }
        }
    }


//})();


08- MOCKER le service : créer une spec de mock


VVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe("Test controller avec service Mocké", function(){
    var rootScope, scope, controller, CameraSrvMock;

    beforeEach(module('Selfie'));

    beforeEach(inject(function($rootScope, $controller, $q) {
        rootScope = $rootScope;
        scope = $rootScope.$new();
        controller = $controller;

        CameraSrvMock = {
            getPicture: function(){
                // mock promise
                var deferred = $q.defer();
                deferred.resolve('Image OK');
                return deferred.promise;
            }            
        };
    }));  

    it('Test promise est OK', function() {
        controller("CameraController as CamCtrl", {
                $scope: scope,
                CameraSrv: CameraSrvMock
            });
            scope.CamCtrl.takePicture();
            scope.$digest();
            expect(scope.CamCtrl.imageURI).toBe('Image OK')
    });
});


^^^^^^^^^^^^^^^^^^^^^^^^^^^


09- Ecrire le service camera.service.js

VVVVVVVVVVVVVVVVVVVVVVVVVVVV



(function() {
    'use strict';

    angular.module('Selfie.Camera.module').
        factory('CameraSrv', Camera);
    
    var injectParams = ["$q"];
    
    /** Functions code */    
    Camera.$inject = injectParams;
    function Camera ($q) {
        return {
            getPicture: function(options) {
              var q = $q.defer();

              try {
                  navigator.camera.getPicture(function(result) {
                    // Do any magic you need
                    q.resolve(result);
                  }, function(err) {
                    q.reject(err);
                  }, options);
              }
              catch(err) {
                  q.reject("img/ionic.png");
              }

              return q.promise;
            }
        }
    }
})();


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^





08- Coder l'index.html

    <script src="js/camera/camera.module.js"></script>
    <script src="js/camera/camera.controller.js"></script>
    <script src="js/camera/camera.service.js"></script>
    
    
    

      <ion-content ng-controller="CameraController as CamCtrl">
          <p ng-show="CamCtrl.imageURI === undefined">Pas d'image</p>
          <img ng-show="CamCtrl.imageURI !== undefined" ng-src="{{CamCtrl.imageURI}}">
          
          <button class="button" ng-click="CamCtrl.takePicture()">Take picture</button>     
      </ion-content>

>> Ca marche en local


09- Lancer sur android

ionic run android


10- Inspect

chrome://inspect

